import React, { useState, useCallback, useEffect } from "react";
import {
  Route,
  Routes,
  HashRouter as Router,
  useNavigate,
  useLocation,
} from "react-router-dom";
import { Home } from "./pages/home/home";
import AboutUs from "./pages/about/aboutUs";
import Projects from "./pages/projects/projects";
import { CreateProject } from "./pages/createProject/createProject";
import { Contributors } from "./pages/contributors/contributors";
import NavScroll from "./navbar/navbar";
import Footer from "./footer/footer";
import { UserProfile } from "./pages/userProfile/userProfile";
import { UserProjects } from "./pages/userProfile/userProjects";
import Project from "./pages/projects/project";
import Login from "./pages/userProfile/loginPage";
import SignUp from "./pages/userProfile/signUpPage";
import { store } from "./redux/store";
import { Provider } from "react-redux";
import { AuthContext } from "./context/auth-context";
import Auth from "./components/Auth/auth";
import axios from "axios";
import Spinner from "./Containers/Spinner/Spinner";

let logoutTimer;

const AppOld = (props) => {
  const [token, setToken] = useState(false);
  const [tokenExpirationDate, setTokenExpirationDate] = useState();
  const [userId, setUserId] = useState(false);
  const [isLoading, setIsloading] = useState(true);
  const navigate = useNavigate();
  const location = useLocation();

  const login = useCallback((uid, token, expirationDate) => {
    setToken(token);
    setUserId(uid);
    setIsloading(false);
    const tokenExpirationDate =
      expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);
    setTokenExpirationDate(tokenExpirationDate);
    localStorage.setItem(
      "userData",
      JSON.stringify({
        userId: uid,
        token: token,
        expiration: tokenExpirationDate.toISOString(),
      })
    );
    axios.defaults.headers.common["Authorization"] = `Bearer ${token}`;
  }, []);

  const logout = useCallback(() => {
    setToken(null);
    setTokenExpirationDate(null);
    setUserId(null);
    localStorage.removeItem("userData");
    localStorage.removeItem("profileData");
    let token = null;
    axios.defaults.headers.common["Authorization"] = `Bearer ${token}`;
  }, []);

  useEffect(() => {
    if (token && tokenExpirationDate) {
      const remainingTime =
        tokenExpirationDate.getTime() - new Date().getTime();
      logoutTimer = setTimeout(logout, remainingTime);
    } else {
      clearTimeout(logoutTimer);
    }
  }, [token, logout, tokenExpirationDate]);

  useEffect(() => {
    const storedData = JSON.parse(localStorage.getItem("userData"));
    setIsloading(false);
    if (
      storedData &&
      storedData.token &&
      new Date(storedData.expiration) > new Date()
    ) {
      login(
        storedData.userId,
        storedData.token,
        new Date(storedData.expiration)
      );
    }
  }, [login]);

  let loading;
  if (isLoading) {
    loading = (
      <>
        <div className="container loading">
          <div className="mar-20">
            <Spinner />
          </div>
        </div>
      </>
    );
  }

  return (
    <Router>
      <AuthContext.Provider
        value={{
          isLoggedIn: !!token,
          token: token,
          userId: userId,
          login: login,
          logout: logout,
        }}
      >
        <div className="App">
          <main>
            <NavScroll />
            <Routes>
              <Route path="/" element={<Home />} />
              <Route path="/login" element={<Login />} />
              <Route path="/signUp" element={<SignUp />} />
              <Route path="/about" element={<AboutUs />} />
              <Route path="/projects" element={<Projects />} />
              <Route path="/project/:id" element={<Project />} />
              <Route path="/create" element={<CreateProject />} />
              <Route path="/contributors" element={<Contributors />} />
              <Route path="/myProjects" element={<UserProjects />} />
              <Route path="/userProfile" element={<UserProfile />} />
              {!token && location.pathname !== "/auth" && (
                <Route
                  path="/*"
                  element={() => {
                    navigate("/auth");
                    return null;
                  }}
                />
              )}
            </Routes>
            <Footer />
          </main>
          {loading}
        </div>
      </AuthContext.Provider>
    </Router>
  );
};

export default AppOld;
